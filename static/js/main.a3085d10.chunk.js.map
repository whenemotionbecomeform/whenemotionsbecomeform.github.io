{"version":3,"sources":["logo.svg","Content/ImageContainer.js","Content/Description.js","Content/Video.js","Content/Intro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageContainer","Container","Image","className","src","fluid","Description","Video","style","height","ResponsiveEmbed","aspectRatio","width","frameborder","allow","allowfullscreen","Intro","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,qMCK5B,SAASC,IACtB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,YACVC,IAA8B,mBAC9BC,OAAK,KCPE,SAASC,IACtB,OACE,u0C,YCFW,SAASC,IACtB,OACE,6BACE,kBAACN,EAAA,EAAD,KACE,yBAAKO,MAAO,CAAEC,OAAQ,SACpB,kBAACC,EAAA,EAAD,CAAiBC,YAAY,SAC3B,4BACEC,MAAM,MACNH,OAAO,MACPL,IAAI,4CACJS,YAAY,IACZC,MAAM,0EACNC,iBAAe,QCRd,SAASC,IACtB,OACE,yBAAKb,UAAU,WACb,wBAAIA,UAAU,SAAd,gEAGA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,OAEF,wBAAIA,UAAU,eAAd,eACA,yBAAKA,UAAU,eACb,kBAACG,EAAD,OAEF,wBAAIH,UAAU,eAAd,SACA,yBAAKA,UAAU,YACb,kBAACI,EAAD,OAEF,wBAAIJ,UAAU,eAAd,UACA,kBAACF,EAAA,EAAD,KACE,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKf,UAAU,YAAf,aACY,6BADZ,WAEU,6BAFV,uBAKA,kBAACe,EAAA,EAAD,CAAKf,UAAU,YAAf,YACW,6BADX,WAC4B,6BAD5B,wBAGA,kBAACe,EAAA,EAAD,CAAKf,UAAU,YAAf,gBACe,6BADf,oBACyC,6BADzC,sBAGA,kBAACe,EAAA,EAAD,CAAKf,UAAU,YAAf,oBACgB,6BADhB,sBAC4C,6BAD5C,4BC1BGgB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3085d10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Image } from \"react-bootstrap\";\nimport \"./ImageContainer.scss\";\n\nexport default function ImageContainer() {\n  return (\n    <Container>\n      <Image\n        className=\"image_box\"\n        src={process.env.PUBLIC_URL + \"/Images/lee2.png\"}\n        fluid\n      />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Image } from \"react-bootstrap\";\n\nexport default function Description() {\n  return (\n    <div>\n      \"When Emotions Become Form\" is an hommage to Harald Szeemann's exhibition\n      \"When Attitudes Become Form\" whose message signifies not only in its year\n      1969 but until today. In the exhibition, Szeemann highlighted the\n      importance of the process of conceptualizing the theory more than creating\n      the artwork itself, which accentuated the role of curators as much of that\n      of the artist in the realm of modern art. We also share the same notion by\n      expanding such role to machines, proving that “(human) emotions” can be\n      expressed in “AI-form”. Our artwork presupposes color and plane geometry\n      as fundamental elements of visual arts. By training via GANs (Generative\n      Adversarial Networks), the AI analyses various images labeled with human\n      emotions and generates obscure shapes and colors in layers through\n      installation to present the ability of machine learning in interpreting\n      abstract images such like such as the Korean abstract painting Dansaekhwa:\n      We first consider the norms for positive and negative emotion-laden words\n      and their color associations. And we used lines or circles on a virtual\n      canvas and achieved different results for marks on a page under various\n      conditions of emotions. Particularly, “Amusement\" was found to be the most\n      consistent with “Dialog” by Lee Ufan in 2011.\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ResponsiveEmbed, Container } from \"react-bootstrap\";\n\nexport default function Video() {\n  return (\n    <div>\n      <Container>\n        <div style={{ height: \"auto\" }}>\n          <ResponsiveEmbed aspectRatio=\"16by9\">\n            <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/Hx0IIAdu3hc\"\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n              allowfullscreen\n            ></iframe>\n          </ResponsiveEmbed>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./Intro.scss\";\nimport ImageContainer from \"./ImageContainer\";\nimport Description from \"./Description\";\nimport Video from \"./Video\";\n\nexport default function Intro() {\n  return (\n    <div className=\"content\">\n      <h1 className=\"title\">\n        A generative approach to Korean abstract painting Dansaekhwa\n      </h1>\n      <div className=\"section\">\n        <div className=\"Img_box\">\n          <ImageContainer></ImageContainer>\n        </div>\n        <h2 className=\"small_title\">Description</h2>\n        <div className=\"description\">\n          <Description></Description>\n        </div>\n        <h2 className=\"small_title\">Video</h2>\n        <div className=\"vido_box\">\n          <Video></Video>\n        </div>\n        <h2 className=\"small_title\">author</h2>\n        <Container>\n          <Row>\n            <Col className=\"flex_box\">\n              TaeJae Han<br></br>\n              MODULABS<br></br>\n              hantaejae@gmail.com\n            </Col>\n            <Col className=\"flex_box\">\n              Jinho Bae<br></br>MODULABS<br></br>silverbjin@gmail.com\n            </Col>\n            <Col className=\"flex_box\">\n              EunJeong Kang<br></br>Sogang University<br></br>eunxkang@gmail.com\n            </Col>\n            <Col className=\"flex_box\">\n              Junghyun Park\u0003<br></br>Samsung Electronics<br></br>\n              ana.park@samsung.com\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Intro from \"./Content/Intro\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Intro></Intro>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}